///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Axon Bridge API Interface
//
// Authored by:   Jeff Rose of Axon Interactive
//
// Last Modified: May 19, 2014
//
// Dependencies:  crypto-js sha256 and hmac256 (https://code.google.com/p/crypto-js/)
//                jQuery 1.11 (http://jquery.com/)
//                json3 (https://github.com/bestiejs/json3)
//                
//
// Contents:      AxonBridge Namespace
//                Bridge Constructor
//                Identity Constructor
//
// *** History ***
//
// Version    Date                  Notes
// =========  ====================  =============================================================
// 0.0.1      May 19, 2014          First release. 
//
///////////////////////////////////////////////////////////////////////////////////////////////////


//
// AxonBridge Namespace
//
var AxonBridge = {

  // [BOOTSTRAP] build()
  // Calling build() builds a Bridge object connecting to the API at the specified URL.
  build: function ( apiURL, apiTimeout ) {

    AxonBridge = new Bridge( apiURL, apiTimeout );

  }

};


// [AxonBridge Constructor]
// The AxonBridge object is the global object through which other applications will 
// communicate with the bridged API resources. It provides a simple surface API for logging
// in and logging out users as well as sending requests to the API. Internally, it handles
// all of the request authentication necessary for the API without exposing the user's
// account password to outside scrutiny (and even scrutiny from other local applications
// to a significant extent).
function Bridge ( apiURL, apiTimeout ) {

  // Don't get screwed by "this".
  var self = this;

  // [PUBLIC] apiURL
  // The URL path to the API to be bridged. This URL must be written so that the final 
  // character is a forward-slash (e.g. https://peir.axoninteractive.ca/api/1.0/).
  this.apiURL = apiURL;

  // [PUBLIC] apiTimeout
  // The timeout period for requests (in milliseconds).
  this.apiTimeout = apiTimeout; 

  // [PRIVATE] identity
  // The Identity object used to track the user and create requests signed with 
  // appropriate HMAC hash values.
  var identity = null;

  // [PUBLIC] user
  // The User object returned by the the database relating to the current identity.
  this.user = null;

  // [PRIVATE] clearIdentity()
  // Sets the current Identity object to null so it gets garbage collected and cannot be used 
  // to validate requests going forward.
  var clearIdentity = function () {

    identity = null;

  };

  // [PRIVATE] setIdentity()
  // Sets the current Identity object to a new instance given a user's email and password.
  var setIdentity = function ( email, password ) {

    identity = new Identity( email, password );

  };

  // [PRIVATE] hasIdentity()
  // Returns whether or not an the Identity object is currently assigned.
  var hasIdentity = function () {

    return ( identity !== null );

  };

  // [PUBLIC] login()
  // Log in a user with the given email/password pair. This creates a new Identity object
  // to sign requests for authentication and performs an initial request to the server to
  // 
  this.login = function ( email, password ) {

    setIdentity( email, password );
    self.user = null; // API CALL TO FETCH USER HERE!

  };

  // [PUBLIC] logout()
  // Set the user object to null and clear the Identity object user to sign requests for
  // authentication purposes, so that the logged-out user's credentials can't still be
  // user to authorize requests.
  this.logout = function () {

    clearIdentity();
    self.user = null;

  };

  // [PUBLIC] isLoggedIn()
  // Check if there is currently a user object set. If no user object is set, then none
  // was returned from the login attempt (and the user is still logged out) or the user 
  // logged out manually.
  this.isLoggedIn = function () {

    return ( user !== null );

  };

  // [PUBLIC] request()
  // Sends an XHR request using jQuery.ajax() to the given API resource using the given 
  // HTTP method. The HTTP request body will be set to the JSON.stringify()ed request 
  // that is generated by the Identity object set to perform HMAC signing.
  // Returns a jQuery jqZHR object. See http://api.jquery.com/jQuery.ajax/#jqXHR.
  // If no Identity is set, sendRequest() returns null, indicating no request was sent.
  this.request = function ( method, resource, payload ) {

    if ( !hasIdentity() ) {
      return null;
    }
    return jQuery.ajax( {
      'type': method,
      'url': self.apiURL + resource,
      'data': JSON.stringify( identity.createRequest( payload ) ),
      'contentType': 'application/json',
      'headers': {
        'Accept': 'application/json'
      },
      'timeout': self.requestTimeout,
      'async': true,
    } );

  };

  // [PUBLIC] rebuild()
  // Creates an entirely new Bridge object to replace this one. Use this carefully!
  this.build = function ( apiURL, apiTimeout ) {

    AxonBridge = new Bridge( apiURL, apiTimeout );

  };

}