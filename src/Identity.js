// [Identity Constructor]
// The Identity object represents an email/password pair used as identification with the
// database to provide authenication for requests. The Identity is used as a request factory
// to create requests that will authenticate the with the server securely.
function Identity ( email, password ) {

  // Don't get screwed by "this".
  var self = this;

  // [PUBLIC] email
  // The email used to identify the user within the database.
  this.email = email;

  // [PRIVATE] hashedPassword
  // The SHA-256 encoded string generated by hashing the given password. 
  // [SECURITY NOTE 1] By hashing the password we store in memory and keeping it local to 
  // this function, we protect the user's password from scrutiny from other local applications.
  // The password supplied as a constructor argument will also be nulled so that it is not kept 
  // in application memory either, so that the original password information is lost.
  var hashedPassword = CryptoJS.SHA256( password );

  // [SECURITY NOTE 2] The user's given password should be forgotten once it has been hashed.
  // Although the password is local to this constructor, it is better that it not even be 
  // available in memory once it has been hashed, since the hashed password is much more 
  // difficult to recover in its original form.
  password = undefined;

  // [PUBLIC] createRequest()
  // Returns a new request, given the content payload of the request as an object. Utilizes
  // hmacSignRequest() to wrap the given payload in an appropriate header to validate against the
  // server-side authorization scheme (assuming the user credentials are correct).
  this.createRequest = function ( payload ) {

    return hmacSignRequest( {
      'content': payload,
      'email': email,
      'time': new Date()
    } );

  };

  // [PRIVATE] hmacSignRequest()
  // Returns the given request object after adding the "hmac" property to it and setting "hmac" 
  // by using the user's password as a SHA-256 HMAC hashing secret.
  // [SECURITY NOTE 3] The HMAC string is a hex value, 64 characters in length. It is created 
  // by concatenating the JSON.stringify()ed request content, the request email, and the request 
  // time together, and hashing the result using hashedPassword as a salt. 
  //
  // Pseudocode:
  // toHash = Request Content JSON + Request Email + Request Time
  // salt = hashedPassword
  // hmacString = sha256( toHash, salt )
  // request.hmac = hmacString
  // 
  // By performing the same
  // operation on the data, the server can confirm that the HMAC strings are identical and
  // authorize the request.
  function hmacSignRequest ( req ) {

    req.hmac = CryptoJS.HmacSHA256(
      JSON.stringify( req.content ) + req.email + req.time.toISOString(),
      hashedPassword
    );
    return req;

  }

}
